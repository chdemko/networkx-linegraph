from collections.abc import Collection, Hashable, Iterator
from functools import cached_property

from networkx import DiGraph, Graph

class LineGraphView:
    def __init__(self, graph: Graph | DiGraph) -> None: ...
    def __iter__(self) -> Iterator[tuple[Hashable, Hashable]]: ...
    def __contains__(self, node: object) -> bool: ...
    def __len__(self) -> int: ...
    def number_of_nodes(self) -> int: ...
    def order(self) -> int: ...
    def has_node(
        self,
        node: tuple[Hashable, Hashable],
    ) -> bool: ...
    def has_edge(
        self,
        node: tuple[Hashable, Hashable],
        other: tuple[Hashable, Hashable],
    ) -> bool: ...
    def neighbors(
        self,
        node: tuple[Hashable, Hashable],
    ) -> Collection[tuple[Hashable, Hashable]]: ...
    @cached_property
    def edges(
        self,
    ) -> Collection[tuple[tuple[Hashable, Hashable], tuple[Hashable, Hashable]]]: ...
    def is_multigraph(self) -> bool: ...
    def is_directed(self) -> bool: ...
    @property
    def graph(self) -> Graph | DiGraph: ...
