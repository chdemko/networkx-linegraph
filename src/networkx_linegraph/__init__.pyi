from collections.abc import Collection, Hashable, Iterator
from functools import cached_property
from typing import TypeVar, Generic

from networkx import DiGraph, Graph

_N = TypeVar("_N", bound=Hashable)

class LineGraphView(Generic[_N]):
    def __init__(self, graph: Graph[_N] | DiGraph[_N] | LineGraphView[_N]) -> None: ...
    def __iter__(self) -> Iterator[tuple[_N, _N]]: ...
    def __contains__(self, node: object) -> bool: ...
    def __len__(self) -> int: ...
    def number_of_nodes(self) -> int: ...
    def order(self) -> int: ...
    def has_node(self, node: tuple[_N, _N]) -> bool: ...
    def has_edge(self, node: tuple[_N, _N], other: tuple[_N, _N]) -> bool: ...
    def neighbors(self, node: tuple[_N, _N]) -> Collection[tuple[_N, _N]]: ...
    @cached_property
    def edges(self) -> Collection[tuple[tuple[_N, _N], tuple[_N, _N]]]: ...
    def is_multigraph(self) -> bool: ...
    def is_directed(self) -> bool: ...
    @property
    def graph(self) -> Graph[_N] | DiGraph[_N] | LineGraphView[_N]: ...
